package proto;

option java_package = "com.getsecretapp.proto";
option java_outer_classname = "ApiProto";

// ************************************************************************
//                              Authentication 
// ************************************************************************

// API#0x01
// Ответ: ResponseAuthCode#0x02
// Возможные ошибки
// #400: PHONE_NUMBER_INVALID - неверный номер телефона. Отображается пользователю.
message RequestAuthCode {
    required int64 phoneNumber = 1;
    required int32 appId = 2;
    required string apiKey = 3;
}
 
// API#0x02
message ResponseAuthCode {
    required string smsHash = 1;
    required bool isRegistered = 2;
}

// API#0x03
// Ответ: ResponseAuth#0x05
// Возможные ошибки
// #400: PHONE_NUMBER_INVALID - неверный номер телефона. Отображается пользователю.
// #400: PHONE_CODE_EMPTY - отсутствует код авторизации. Отображается пользователю.
// #400: PHONE_CODE_EXPIRED - код устарел, требуется начать авторизацию с самого начала
// #400: PHONE_CODE_INVALID - код неверен. Отображается пользователю.
// #400: PHONE_NUMBER_UNOCCUPIED - Телефон не зарегистрирован, требуется перейти к регистрации
// #400: INVALID_KEY - Публичный ключ некорректный - проверьте параметры ключа и его сериализацию.
// На неверный smsHash будет ошибка PHONE_CODE_EXPIRED
message RequestSignIn {
    required int64 phoneNumber = 1;
    required string smsHash = 2;
    required string smsCode = 3;
    required bytes publicKey = 4;
}

// API#0x04
// Ответ: ResponseAuth#0x05
// Возможные ошибки
// #400: FIRSTNAME_INVALID - неправильное имя. Отображается пользователю.
// #400: LASTNAME_INVALID - неправильная фамилия. Отображается пользователю.
// + аналогичные для RequestSignIn
// Если пользователь уже зарегистрирован, то метод работает как RequestSignIn
message RequestSignUp {
    required int64 phoneNumber = 1;
    required string smsHash = 2;
    required string smsCode = 3;
    required string firstName = 4;
    optional string lastName = 5;
    required bytes publicKey = 6;
}

// API#0x05
message ResponseAuth {
    required int64 publicKeyHash = 1;
    required User user = 2;
}

// ************************************************************************
//                                Users
// ************************************************************************

enum Sex {
    UNKNOWN = 1;
    MALE = 2;
    FEMALE = 3;
}

message User {
    required int32 id = 1;
    required int64 accessHash = 2;
    required string firstName = 3;
    optional string lastName = 4;
    optional Sex sex = 5;
    repeated int64 keyHashes = 6;
}

message PublicKey {
    required int32 uid = 1;
    required int64 keyHash = 2;
    required bytes key = 3;
}

message PublicKeyRequest {
    required int32 uid = 1;
    required int64 accessHash = 2;
    required int64 keyHash = 3;
}

// API#0x06
// Ответ: RequestPublicKeys#0x18
// Ошибки не может генерировать, все несуществующие ключи игнорируются
message RequestPublicKeys {
    repeated PublicKeyRequest keys = 1;
}
// API#0x18
message ResponsePublicKeys {
    repeated PublicKey keys = 1;
}

// ************************************************************************
//                                Contacts
// ************************************************************************

message ContactToImport {
    required int64 clientPhoneId = 1; // Уникальный клиентский идентификатор телефона
    required int64 phoneNumber = 2; // international full phone number
}

message ImportedContact {
    required int64 clientPhoneId = 1;
    required int32 userId = 2;
}

// API#0x07
// Ответ: ResponseImportedContacts#0x08
// Мы предполагем что phoneNumber и clientPhoneId будут уникальны
// Если же не уникальны, то поведение сервера непредсказуемо
// Крайне рекомендуется на клиенте поддержать уникальность
message RequestImportContacts {
    repeated ContactToImport contacts = 1;
}

// API#0x08
message ResponseImportedContacts {
    repeated User users = 1; // Импортированные пользователи
    repeated ImportedContact contacts = 2;
}

// ************************************************************************
//                                 Updates
// ************************************************************************

// API#0x0D
message CommonUpdate {
    required int32 seq = 1;
    required bytes state = 2;
    required int32 updateId = 3;
    required bytes update = 4;
}

// API#0x19
message CommonUpdateTooLong {
}

// API#0x09
// Ответ: State#0x0A
message RequestGetState {

}

// API#0x0A
message State {
    required int32 seq = 1;
    required bytes state = 2;
}

// API#0x0B
// Ответ: Difference#0x0C
message RequestGetDifference {
    required int32 seq = 1;
    required bytes state = 2;
}

// API#0x0C
message Difference {
    required int32 seq = 1;
    required bytes state = 2;
    repeated User users = 3;
    repeated CommonUpdate updates = 4;
}

// ************************************************************************
//                             Updates List
// ************************************************************************

// API#0x01
// Событие о новом приватном сообщении
message UpdateMessage {
    required int32 senderUID = 1;
    required int32 destUID = 2;
    required int32 mid = 3;
    required int64 keyHash = 4; // Might be equals to device public key hash
    required bool useAesKey = 5;
    optional bytes aesKey = 6;
    required bytes message = 7;
}

// API#0x02
// Событие о новом устройстве у пользователя
message UpdateNewDevice {
    required int32 uid = 1;
    required int64 keyHash = 2;
}

// API#0x03
// Событие о новом своем устройстве
message UpdateNewYourDevice {
    required int32 uid = 1;
    required int64 keyHash = 2;
    required bytes key = 3;
}

// ************************************************************************
//                               Send message
// ************************************************************************

message EncryptedMessage {
    required int32 uid = 1;
    required int64 keyHash = 2;
    optional bytes aesEncryptedKey = 3;
    optional bytes message = 4;
}

// API#0x0E
message RequestSendMessage {
    required int32 uid = 1;
    required int64 accessHash = 2;
    required bool useAesKey = 3;
    optional bytes aesMessage = 4;
    repeated EncryptedMessage messages = 5;
}

// API#0x0F
message ResponseSendMessage {
    required int32 mid = 1;
    required int32 seq = 2;
    required bytes state = 3;
}

// ************************************************************************
//                                  Files
// ************************************************************************

message FileLocation {
    required int64 fileId = 1;
    required int64 accessHash = 2;
}

message UploadConfig {
    required bytes serverData = 1;
}

// File Download
// API#0x10
// Ответ: ResponseFilePart#0x11
// #400: LOCATION_INVALID - неправильный FileLocation - либо id, либо accessHash
// #400: OFFSET_INVALID - offset не кратен 1кб или меньше нуля
// #400: OFFSET_TOO_LARGE - offset находится за пределами файла
// #400: LIMIT_INVALID - limit отрицателен, не кратен 1кб или больше 512кб
// #400: FILE_LOST - файл был потерян и невозможно больше его загрузить
message RequestGetFile {
    required FileLocation fileLocation = 1;
    required int32 offset = 2;
    required int32 limit = 3;
}

// API#0x11
message ResponseFilePart {
    required bytes data = 1;
}

// File Upload
// API#0x12
message RequestUploadStart {

}

// API#0x13
message ResponseUploadStart {
    required UploadConfig config = 1;
}

// API#0x14
// Ответ: ResponseFileUploadStarted#0x15
// #400: CONFIG_INCORRECT - неизвестный конфиг
message RequestUploadFile {
    required UploadConfig config = 1;
    required int32 blockIndex = 2;
    required bytes data = 3;
}

// API#0x15
message ResponseFileUploadStarted {
}

// API#0x16
// Ответ: FileUploaded#0x17
// #400: CONFIG_INCORRECT - неизвестный конфиг
// #400: WRONG_BLOCKS_COUNT - количество загруженных блоков не совпадает
// #400: WRONG_CRC - контрольная сумма не сошлась
message RequestCompleteUpload {
    required UploadConfig config = 1;
    required int32 blocksCount = 2;
    required int32 crc32 = 3;
}

// API#0x17
message FileUploaded {
    required FileLocation location = 1;
}