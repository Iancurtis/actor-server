spray-client {
  # config for spray-client's actor system
  # need separate system because of https://github.com/wandoulabs/spray-websocket/issues/44
  akka {
    actor {
      provider = "akka.actor.LocalActorRefProvider"
    }
  }
}

actor-server {
  actor-system-name = "actor-server"

  sms {
    sms-wait-interval = 30m

    clickatell {
      http {
        connection-timeout-ms = 5000
        pooling-connection = true
        maximum-connections-total = 1
        throttle-request = 1
      }
    }

    twilio {

    }
  }

  server {
    tcp-port = 8080
    ws-port = 8082
  }

  session {
    receive-timeout = 15m
  }

  akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    stdout-loglevel = "DEBUG"
    log-dead-letters = 10
    log-dead-letters-during-shutdown = off

    persistence {
      journal {
        plugin = "akka-persistence-sql-async.journal"
      }

      snapshot-store {
        plugin = "akka-persistence-sql-async.snapshot-store"
      }
    }

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
        protobuf-message-payload = "im.actor.server.protobuf.ProtobufMessageSerializer"
      }

      serialization-bindings {
        "im.actor.server.protobuf.ProtobufMessageLite" = protobuf-message-payload
      }
    }

    extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]

    remote {
      log-remote-lifecycle-events = on
    }

    cluster {
      log-info = on
      auto-down-unreachable-after = 10s
    }
  }

  cassandra {
    keyspace = "secret"
    contact-points = ["localhost", ${?CASSANDRA_HOST}]
    port = 9042
    read-timeout-millis = 12000

    pool {
      min-simutaneous-requests-per-connection-treshold = 10
      max-simutaneous-requests-per-connection-treshold = 100
      core-connections-per-host = 2
      max-connections-per-host = 50
    }
  }

  akka-persistence-sql-async {
    #journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
    #snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

    # For PostgreSQL
    journal.class = "akka.persistence.journal.sqlasync.PostgreSQLAsyncWriteJournal"
    snapshot-store.class = "akka.persistence.snapshot.sqlasync.PostgreSQLSnapshotStore"

    user = "postgres"
    pass = ""
    url = "jdbc:postgresql://localhost:5432/actor"
    max-pool-size = 4 # total connection count
    wait-queue-capacity = 10000 # If query cannot be executed soon, it wait in the queue and will be executed later.
    journal-table-name = "akka_journal"
    snapshot-table-name = "akka_snapshot"
  }
}
